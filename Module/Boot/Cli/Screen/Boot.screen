/**
 * (c) 2000 - 2018 by Remco van der Velde
 *

for methods we need + for concatinating strings.
 */
{priya}
$priya.debug4 = true;
$start = microtime(true);
$end = microtime(true);
$duration.1 = $start - $end;
$duration.2 = $end - $start;

$dir.root = !!! ( array )
(
task.root(
    'ls - al',
    (100 + (1 * 1.01 + (microtime(true)))),
    101.12,
    true,
    false,
    null
) +
task.root(
    'ls - al',
) +
(array) $data.test.variable
);
terminal.write.line($duration.2 - $duration.1 + " seconds (1+1){microtime(true)}" + (4.03 + (3 -1)) + microtime(true), title);
terminal.write.line(microtime(true), title);
/**
 token cached "microtime(true), title)" ... so it reads $this->data("priya.parser.token.microtime(true), title).token");
 calculate the cache hits (read.count) per token and we need an id.
 $this->data("priya.parser.token.microtime(true), title).hit", $this->data("priya.parser.token.microtime(true), title).hit")++)
 *
 *
 when having a - operator with 2 strings & !is_numeric(string)
 *
 */
terminal.write.line($duration.2 - $duration.1 . ' seconds {microtime(true)}');
terminal.write.line($duration.2)
{/priya}

terminal.write.line(math.circle(2.82))
terminal.write.line("{math.circle(5, diameter)}")
